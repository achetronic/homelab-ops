# We are using a meta Helm chart called app-template from bwj-s.
# Reference values can be inspected there.
# Ref: https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml

# Thank you, Piotr Maksymiuk for some of these configs.
# We worked together and still miss you, weird dude!

rawResources:

  bucket-credentials:
    enabled: true
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterExternalSecret
    spec:
      spec:
        externalSecretName: "bucket-credentials"
        namespaceSelectors:
          - matchLabels:
              kubernetes.io/metadata.name: postgres
        refreshTime: "1m"
        externalSecretSpec:
          secretStoreRef:
            kind: ClusterSecretStore
            name: gitlab-secret-store
          target:
            name: bucket-credentials
          data:
            - secretKey: ACCESS_KEY_ID
              remoteRef:
                key: S3_ACCESS_KEY_ID_CNPG

            - secretKey: ACCESS_SECRET_KEY
              remoteRef:
                key: S3_SECRET_ACCESS_KEY_CNPG

  database-admin-credentials:
    enabled: true
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterExternalSecret
    spec:
      spec:
        externalSecretName: "database-admin-credentials"
        namespaceSelectors:
          - matchLabels:
              kubernetes.io/metadata.name: postgres
        refreshTime: "1m"
        externalSecretSpec:
          secretStoreRef: &secretStoreRefCr
            kind: ClusterSecretStore
            name: gitlab-secret-store
          target:
            name: database-admin-credentials
            template:
              engineVersion: v2
              type: kubernetes.io/basic-auth
              data:
                username: "postgres"
                password: "{{ `{{ .POSTGRES_PASSWORD }}` }}"
          data:
            - secretKey: POSTGRES_PASSWORD
              remoteRef:
                key: POSTGRES_PASSWORD_USER_POSTGRES

  database-user-credentials:
    enabled: true
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterExternalSecret
    spec:
      spec:
          externalSecretName: "database-user-credentials"
          namespaceSelectors:
            - matchLabels:
                kubernetes.io/metadata.name: postgres
            - matchLabels:
                kubernetes.io/metadata.name: keycloak
            - matchLabels:
                kubernetes.io/metadata.name: bitmagnet
          refreshTime: "1m"
          externalSecretSpec:
            secretStoreRef: &secretStoreRefCr
              kind: ClusterSecretStore
              name: gitlab-secret-store
            target:
              name: database-user-credentials
              template:
                engineVersion: v2
                type: kubernetes.io/basic-auth
                data:
                  username: "app"
                  password: "{{ `{{ .POSTGRES_PASSWORD }}` }}"
            data:
              - secretKey: POSTGRES_PASSWORD
                remoteRef:
                  key: POSTGRES_PASSWORD_USER_APP

  long-lived-ca-certificate:
    enabled: true
    apiVersion: cert-manager.io/v1
    kind: Certificate
    spec:
      spec:
        isCA: true
        commonName: "PostgreSQL Root CA"
        secretName: postgres-root-ca-secret
        duration: 175200h        # 20 years. Shut up! this is a homelab, bruh.
        renewBefore: 8760h       # 1 year
        privateKey:
          algorithm: ECDSA
          size: 256
        issuerRef:
          name: self-signed
          kind: ClusterIssuer

  # This automation is disabled as PushSecret is not implemented for GitLab ESO provider.
  # It's here as a demo of how to automate upload of autogenerated local CA.
  upload-ca-certificate:
    enabled: false
    apiVersion: external-secrets.io/v1alpha1
    kind: PushSecret
    spec:
      spec:
        secretStoreRefs:
          - kind: ClusterSecretStore
            name: gitlab-secret-store
        selector:
          secret:
            name: postgres-root-ca-secret
        template:
          metadata:
            annotations: {}
            labels: {}
          data:
            prepared: "{{ `{{ . | toYaml | b64enc }}` }}"
        data:
          - conversionStrategy: None
            match:
              secretKey: prepared
              remoteRef:
                remoteKey: POSTGRES_CERTIFICATES_CA_TEST

  database-certificates-ca:
    enabled: true
    apiVersion: external-secrets.io/v1beta1
    kind: ClusterExternalSecret
    spec:
      spec:
        externalSecretName: "database-certificates-ca"
        namespaceSelectors:
          - matchLabels:
              kubernetes.io/metadata.name: postgres
        refreshTime: "1m"
        externalSecretSpec:
          secretStoreRef: &secretStoreRefCr
            kind: ClusterSecretStore
            name: gitlab-secret-store
          target:
            name: database-certificates-ca
            template:
              engineVersion: v2
              data:
                ca.crt: '{{ `{{ index (.POSTGRES_CERTIFICATES_CA | fromYaml) "ca.crt" }}` }}'
                ca.key: '{{ `{{ index (.POSTGRES_CERTIFICATES_CA | fromYaml) "tls.key" }}` }}'
          data:
            - secretKey: POSTGRES_CERTIFICATES_CA
              remoteRef:
                key: POSTGRES_CERTIFICATES_CA
                decodingStrategy: Base64

  # Ref: https://cloudnative-pg.io/plugin-barman-cloud/docs/usage/
  bucket-backup-objectstore:
    enabled: true
    apiVersion: barmancloud.cnpg.io/v1
    kind: ObjectStore
    spec:
      spec:
        configuration:
          destinationPath: s3://backups-kubernetes/cloudnative-pg/
          endpointURL: https://c16c8ed6d0135e8a50024e0eb1c49e51.r2.cloudflarestorage.com
          s3Credentials:
            accessKeyId:
              name: bucket-credentials
              key: ACCESS_KEY_ID
            secretAccessKey:
              name: bucket-credentials
              key: ACCESS_SECRET_KEY
          wal:
            compression: bzip2
            maxParallel: 4
          data:
            compression: bzip2
        retentionPolicy: 7d

        instanceSidecarConfiguration:
          retentionPolicyIntervalSeconds: 1800
          resources:
            limits:
              memory: "2Gi"
            requests:
              memory: "512Mi"
