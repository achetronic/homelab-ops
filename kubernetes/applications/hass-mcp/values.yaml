# We are using a meta Helm chart called app-template from bwj-s.
# Reference values can be inspected there.
# Ref: https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml


defaultPodOptions:
  labels:
    sidecar.istio.io/inject: "true"

  annotations:
    sidecar.istio.io/proxyCPU: 100m
    sidecar.istio.io/proxyCPULimit: 150m
    sidecar.istio.io/proxyMemory: 200Mi
    sidecar.istio.io/proxyMemoryLimit: 200Mi

controllers:

  application:
    type: deployment
    replicas: 1

    labels: {}
    annotations:
      reloader.stakater.com/auto: "true"

    initContainers:
      download-mcpproxy:
        image:
          repository: alpine
          tag: latest
        command: [ "sh", "-c" ]
        args:
          - |
            apk add --no-cache wget tar
            cd /tmp
            wget https://github.com/achetronic/mcp-proxy/releases/download/v0.1.0/mcp-proxy-v0.1.0-linux-amd64.tar.gz
            tar -xzf mcp-proxy-v0.1.0-linux-amd64.tar.gz
            cp mcp-proxy /shared/mcp-proxy
            chmod +x /shared/mcp-proxy
            echo "mcp-proxy downloaded and ready"

    containers:
      main:
        image:
          repository: voska/hass-mcp
          tag: latest
          pullPolicy: Always
        command: [ "/shared/mcp-proxy" ]
        args: [ "--config", "/config/config.yaml" ]
        ports:
          - containerPort: 8080
        envFrom:
          - configMapRef:
              identifier: config-env
          - secretRef:
              name: "{{ .Release.Name }}-hass-credentials"

persistence:
# Following commented lines are here for the future
#  mcp-proxy:
#    enabled: false
#    type: custom
#    volumeSpec:
#      image:
#        reference: ghcr.io/achetronic/mcp-proxy:v0.1.0
#        pullPolicy: IfNotPresent
#    advancedMounts:
#      application:
#        main:
#          - path: /shared
#            readOnly: true
#            mountPropagation: None

  shared-binaries:
    enabled: true
    type: emptyDir
    globalMounts:
      - path: /shared
        readOnly: false

  configuration:
    enabled: true
    name: "{{ .Release.Name }}-configuration"
    type: configMap
    advancedMounts:
      application:
        main:
          - path: /config/config.yaml
            readOnly: true
            mountPropagation: None
            subPath: config.yaml

configMaps:
  config-env:
    enabled: true
    annotations: {}
    data:
      HA_URL: https://home-assistant.tools.internal.place

  configuration:
    enabled: true
    annotations: {}
    data:
      config.yaml: |
        # MCP Server Configuration
        server:
          name: "Home Assistant"
          version: "0.1.0"
          transport:
            type: "http"
            http:
              host: ":8080"

          options:
            cache_threshold_bytes: 10000
            pagination_default_page_size: 50
            pagination_max_page_size: 1000

        # Middleware Configuration
        middleware:
          access_logs:
            excluded_headers:
              - X-Excluded
            redacted_headers:
              - Authorization
              - X-Validated-Jwt

          jwt:
            enabled: false
            validation:
              strategy: "external"  # Values: 'local' or 'external'
              # JWT forwarded by upstream proxy (Istio, etc.)
              # Ref: https://istio.io/latest/docs/reference/config/security/request_authentication/#JWTRule-output_payload_to_header
              forwarded_header: "X-Validated-Jwt"
              local:
                jwks_uri: &JwksUri "https://keycloak.example.com/realms/mcp-servers/protocol/openid-connect/certs"
                cache_interval: "10s"

                # CEL expressions to fine tune allowance. JWT payload is available under object 'payload'
                allow_conditions: []
                  #- expression: 'payload.groups.exists(group, group in ["admin", "editor"])'
                  #- expression: 'has(payload.email) && payload.email.endsWith("@example.com")'

        # Oauth Authorization Server Configuration
        # Endpoint: /.well-known/oauth-authorization-server
        oauth_authorization_server:
          enabled: false

          # Following path will be attached: /.well-known/openid-configuration
          issuer_uri: "https://keycloak.example.com/realms/mcp-servers"

        # Oauth Protected Resource Configuration
        # Endpoint: /.well-known/oauth-protected-resource
        oauth_protected_resource:
          enabled: false
          resource: "https://mcp-proxy.example.com"
          auth_servers:
            - "https://keycloak.example.com/realms/mcp-servers"
          jwks_uri: *JwksUri
          scopes_supported:
            - openid
            - profile
            - email
            - groups
            - mcp-proxy/custom-audience

        # Config related to the MCP behind the proxy
        backend:
          transport:
            type: "stdio"
            stdio:
              command: "python"
              args:
                - "-m"
                - "app"

service:
  backend:
    controller: application
    type: ClusterIP
    ports:
      http:
        port: 8080
        protocol: TCP

# Some stuff is not covered by this chart
rawResources:
  hass-credentials:
    enabled: true
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    spec:
      spec:
        refreshInterval: "15s"
        secretStoreRef:
          kind: ClusterSecretStore
          name: gitlab-secret-store
        target:
          name: "{{ .Release.Name }}-hass-credentials"
        data:
          - secretKey: HA_TOKEN
            remoteRef:
              key: HASS_MCP_HOME_ASSISTANT_TOKEN

  public-entrance:
    enabled: true
    apiVersion: gateway.networking.k8s.io/v1
    kind: HTTPRoute
    spec:
      spec:
        hostnames:
          - hass-mcp.tools.internal.place
        parentRefs:
          - group: gateway.networking.k8s.io
            kind: Gateway
            name: gateway-api-extra-gateway-production
            namespace: istio
            sectionName: https-terminate
        rules:
          - backendRefs: &mainBackendRef
              - group: ""
                kind: Service
                name: hass-mcp
                port: 8080
                weight: 1
            matches:
              - path:
                  type: PathPrefix
                  value: /
